generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  imageUrl  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

model Product {
  id                 String           @id @default(cuid())
  name               String
  slug               String           @unique
  description        String
  basePrice          Decimal          @db.Decimal(10, 2)
  imageUrls          String[]
  discountPercentage Int              @default(0)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  variation          String[]
  stock              Int              @default(0)
  selectedVariation  String?
  categoryId         String
  datailsProduct     DatailsProduct[]
  orderProduct       OrderProduct[]
  category           Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Order {
  id           String         @id @default(cuid())
  status       OrderStatus    @default(WAITING_FOR_PAYMENT)
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orderProduct OrderProduct[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model OrderProduct {
  id                 String   @id @default(cuid())
  productId          String
  orderId            String
  basePrice          Decimal  @db.Decimal(10, 2)
  quantity           Int
  discountPercentage Int      @default(0)
  selectedVariation  String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  order              Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product            Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order-products")
}

model Datails {
  id             String           @id @default(cuid())
  title          String
  subTitle       String[]
  imageUrl       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  DatailsProduct DatailsProduct[]

  @@map("details")
}

model DatailsProduct {
  id        String   @id @default(cuid())
  productId String
  detailsId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  details   Datails  @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("details-product")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  PAYMENT_CONFIRMED
}
